# This is a basic workflow to help you get started with Actions

name: Test, Build and Deploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DEPLOYMENT_PATH: '/srv/www/byite-venv/'
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_DEBUG: '0'
  DJANGO_ALLOWED_HOSTS: ''
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  DATABASE_USER: ${{ secrets.DATABASE_USER }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  EMAIL_USER: ''
  EMAIL_PASSWORD: ''
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      matrix:
        include:
          - python-version: 3.8
            django-version: Django==3.1

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ${{ matrix.django-version }}
      - name: Test Django=${{ matrix.django-version }}, Python=${{ matrix.python-version }}
        run: |
          python manage.py test --noinput

        
  # Job to deploy python files to server
  deploy_to_server:
    # Dependant on success of test & build_and_deploy_static
    needs: build_and_deploy_static
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python dependancies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # Be Careful automatically applying migrations to prod databases.
      - name: Make migrations
        run: |
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput
        
      # Retreive private key from secrets and save as file deployment.key
      - name: Key management for deployment
        env:
          DEPLOYMENT_SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          DEPLOYMENT_PUB_KEY_FINGERPRINT: ${{ secrets.DEPLOYMENT_PUB_KEY_FINGERPRINT }}
          GITHUB_PUB_KEY_FINGERPRINT: ${{ secrets.GH_PUB_KEY_FINGERPRINT }}
        run: |
          mkdir ~/.ssh
          echo "$DEPLOYMENT_PUB_KEY_FINGERPRINT" >> ~/.ssh/known_hosts
          echo "$DEPLOYMENT_SSH_KEY" >> deployment.key
          chmod 400 deployment.key
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} 'if ! ssh-keygen -F github.com; then echo '"$GH_PUB_KEY_FINGERPRINT"' >> /home/deploy/.ssh/known_hosts; fi'
        # add github public key to known_hosts on deployment server if using ssh protocol
      
      # Run update scripts on remote server
      - name: Push application code to server
        run: |
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} 'if ! git -C '"${DEPLOYMENT_PATH}"'src ls-remote origin &>/dev/null; then git -C '"${DEPLOYMENT_PATH}"'src remote add origin git@github.com-byite:scott-j5/byite.git; fi'
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C "${DEPLOYMENT_PATH}"src fetch --all
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C "${DEPLOYMENT_PATH}"src reset --hard "${GITHUB_SHA}"
        # ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C "${DEPLOYMENT_PATH}"src clone git@github.com-bdc:scott-j5/bdc.git .
        # ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} git -C "${DEPLOYMENT_PATH}"src checkout "${GITHUB_SHA}"

      - name: Update application code permissions
        run: |
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} sudo chown -R deploy:www-data "${DEPLOYMENT_PATH}"src
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} sudo chmod -R 750 "${DEPLOYMENT_PATH}"src
        # Set perms for Sqlite, media etc. if required.

      - name: Install Pyhton Dependancies
        run: |
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} 'source '"${DEPLOYMENT_PATH}"'bin/activate; pip install -r '"${DEPLOYMENT_PATH}"'src/requirements.txt'

      - name: Restart Services
        run: |
          ssh -i deployment.key deploy@${{ secrets.SERVER_IP }} sudo /etc/init.d/apache2 restart